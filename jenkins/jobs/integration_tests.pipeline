import java.text.SimpleDateFormat

ci_git_credential_id = "metal3-jenkins-github-token"

// 10 minutes
def CLEAN_TIMEOUT = 600
// 1 hour 30 minutes
def TIMEOUT = 5400
SKIP_DELETION=(env.SKIP_DELETION)

if (env.TESTS_FOR) {
  if ( (env.TESTS_FOR).startsWith('feature_tests') || (env.TESTS_FOR).startsWith('e2e_tests') ) {
    // 6 hours
    TIMEOUT = 21600
  }
}

script {
  if ("${PROJECT_REPO_ORG}" == "metal3-io" && "${PROJECT_REPO_NAME}" == "project-infra") {
    echo "Checkout ${ghprbAuthorRepoGitUrl} branch ${ghprbActualCommit}"
    ci_git_branch="${ghprbActualCommit}"
    ci_git_url = "${ghprbAuthorRepoGitUrl}"
  } else {
    echo "Checkout ${ghprbAuthorRepoGitUrl} main"
    ci_git_branch = "main"
    ci_git_url = "https://github.com/metal3-io/project-infra.git"
  }

  def date = new Date()
  def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
  def rand = new Random()
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
  
  if ("${SKIP_DELETION}" == "true") {
    VM_NAME = "ci-test-keep-vm-" + dateFormat.format(date) + "-" + VM_KEY
  } else {
    VM_NAME = "ci-test-vm-" + dateFormat.format(date) + "-" + VM_KEY
  }
}

pipeline {
  agent { label 'airship-static-workers' }
  environment {
    AIRSHIP_CI_USER="airshipci"
    REPO_ORG = "${PROJECT_REPO_ORG}"
    REPO_NAME = "${PROJECT_REPO_NAME}"
    UPDATED_REPO = "${ghprbAuthorRepoGitUrl}"
    REPO_BRANCH = "${ghprbTargetBranch}"
    UPDATED_BRANCH = "${ghprbActualCommit}"
    OS_USERNAME="airshipci"
    OS_AUTH_URL="https://kna1.citycloud.com:5000"
    OS_USER_DOMAIN_NAME="CCP_Domain_37137"
    OS_PROJECT_DOMAIN_NAME="CCP_Domain_37137"
    OS_REGION_NAME="Kna1"
    OS_PROJECT_NAME="Default Project 37137"
    OS_TENANT_NAME="Default Project 37137"
    OS_AUTH_VERSION=3
    OS_IDENTITY_API_VERSION=3
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    BUILD_TAG = "${env.BUILD_TAG}"
    PR_ID = "${ghprbPullId}"
    DISTRIBUTION = "${DISTRIBUTION}"
    CAPI_VERSION = "${CAPI_VERSION}"
    CAPIRELEASE = "${CAPIRELEASE}"
    CAPM3_VERSION = "${CAPM3_VERSION}"
    CAPM3RELEASE = "${CAPM3RELEASE}"
    IMAGE_OS = "${TARGET_NODE_OS}"
    DEFAULT_HOSTS_MEMORY = "${TARGET_NODE_MEMORY}"
    NUM_NODES="${NUM_NODES}"
    TESTS_FOR="${TESTS_FOR}"
    SKIP_DELETION="${SKIP_DELETION}"

  }
  stages {
    stage('SCM') {
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
                 branches: [[name: ci_git_branch]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [[$class: 'WipeWorkspace'],
                 [$class: 'CleanCheckout'],
                 [$class: 'CleanBeforeCheckout']],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                 url: ci_git_url]]])
        script {
          CURRENT_START_TIME = System.currentTimeMillis()
        }
      }
    }
    stage('Run integration test') {
      options {
        timeout(time: TIMEOUT, unit: 'SECONDS')
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'airshipci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
          withCredentials([sshUserPrivateKey(credentialsId: 'airshipci_city_cloud_ssh_keypair', keyFileVariable: 'AIRSHIP_CI_USER_KEY')]) {
            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]) {
              ansiColor('xterm') {
                sh "./jenkins/scripts/integration_test.sh"
              }
            }
          }
        }
      }
      post {
        always {
          script {
            CURRENT_END_TIME = System.currentTimeMillis()
            if ((((CURRENT_END_TIME - CURRENT_START_TIME)/1000) - TIMEOUT) > 0) {
              echo "Failed due to timeout"
              currentBuild.result = 'FAILURE'
            }
          }
          withCredentials([usernamePassword(credentialsId: 'airshipci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
            withCredentials([sshUserPrivateKey(credentialsId: 'airshipci_city_cloud_ssh_keypair', keyFileVariable: 'AIRSHIP_CI_USER_KEY')]){
              sh "./jenkins/scripts/fetch_logs.sh"
            }
          }
          archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
        }
      }
    }
  }
  post {
    success {
      withCredentials([usernamePassword(credentialsId: 'airshipci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
        withCredentials([sshUserPrivateKey(credentialsId: 'airshipci_city_cloud_ssh_keypair', keyFileVariable: 'AIRSHIP_CI_USER_KEY')]){
          script {
            if ("${SKIP_DELETION}" == "true") {
              echo "Skipping environment clean up"
            } else {
              sh "./jenkins/scripts/integration_test_clean.sh"
            }
          }
        }
      }
    }
    cleanup {
      withCredentials([usernamePassword(credentialsId: 'airshipci_city_cloud_openstack_credentials', usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD')]) {
        withCredentials([sshUserPrivateKey(credentialsId: 'airshipci_city_cloud_ssh_keypair', keyFileVariable: 'AIRSHIP_CI_USER_KEY')]){
          script {
            if ("${SKIP_DELETION}" == "true") {
              echo "Skipping VM deletion"
            } else {
              sh "./jenkins/scripts/integration_delete.sh"
            }     
          }  
        }
      }
    }
  }
}
