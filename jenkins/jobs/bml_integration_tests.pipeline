import java.text.SimpleDateFormat

ci_git_credential_id = "metal3-jenkins-github-token"


script {
  if ("${PROJECT_REPO_ORG}" == "metal3-io" && "${PROJECT_REPO_NAME}" == "project-infra") {
    echo "Checkout ${ghprbAuthorRepoGitUrl} branch ${ghprbActualCommit}"
    ci_git_branch="${ghprbActualCommit}"
    ci_git_url = "${ghprbAuthorRepoGitUrl}"
  } else {
    echo "Checkout ${ghprbAuthorRepoGitUrl} main"
    ci_git_branch = "main"
    ci_git_url = "https://github.com/metal3-io/project-infra.git"
  }
  def date = new Date()
  def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
  def rand = new Random()
  VM_KEY = (1..4).collect { ('a'..'z').join("")[ rand.nextInt( 26 ) ] }.join("")
  VM_NAME = "ci-test-vm-" + dateFormat.format(date) + "-" + VM_KEY
}

pipeline {
  /* In the BML we always run on the same machine so concurrency must be disabled */
  options {
    disableConcurrentBuilds()
  }
  agent { label 'metal3-static-workers' }
  environment {
    METAL3_CI_USER="metal3ci"
    REPO_ORG = "${PROJECT_REPO_ORG}"
    REPO_NAME = "${PROJECT_REPO_NAME}"
    UPDATED_REPO = "${ghprbAuthorRepoGitUrl}"
    REPO_BRANCH = "${ghprbTargetBranch}"
    UPDATED_BRANCH = "${ghprbActualCommit}"
    TEST_EXECUTER_VM_NAME = "${VM_NAME}"
    BUILD_TAG = "${env.BUILD_TAG}"
    PR_ID = "${ghprbPullId}"
    IMAGE_OS = "centos"
    CAPI_VERSION = "${CAPI_VERSION}"
    CAPM3_VERSION = "${CAPM3_VERSION}"
    DEFAULT_HOSTS_MEMORY = "${TARGET_NODE_MEMORY}"
    NUM_NODES="${NUM_NODES}"
    UPGRADE_TEST="${UPGRADE_TEST}"
    EPHEMERAL_TEST="${EPHEMERAL_TEST}"
    TESTS_FOR="${TESTS_FOR}"
    BARE_METAL_LAB=true
  }
  stages {
    stage('SCM') {
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        /* Checkout CI Repo */
        checkout([$class: 'GitSCM',
                 branches: [[name: ci_git_branch]],
                 doGenerateSubmoduleConfigurations: false,
                 extensions: [[$class: 'WipeWorkspace'],
                 [$class: 'CleanCheckout'],
                 [$class: 'CleanBeforeCheckout']],
                 submoduleCfg: [],
                 userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                 url: ci_git_url]]])
        script {
          CURRENT_START_TIME = System.currentTimeMillis()
        }
      }
    }
    stage('Run integration test') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]) {
          withCredentials([usernamePassword(credentialsId: 'metal3-bml-ilo-credentials', usernameVariable: 'BML_ILO_USERNAME', passwordVariable: 'BML_ILO_PASSWORD')]) {
            withCredentials([string(credentialsId: 'metal3-clusterctl-github-token', variable: 'GITHUB_TOKEN')]){
              sh "./jenkins/scripts/bml_integration_test.sh"
            }
          }
        }
      }
      post {
        always {
          withCredentials([sshUserPrivateKey(credentialsId: 'metal3ci_city_cloud_ssh_keypair', keyFileVariable: 'METAL3_CI_USER_KEY')]){
            withCredentials([usernamePassword(credentialsId: 'metal3-bml-ilo-credentials', usernameVariable: 'BML_ILO_USERNAME', passwordVariable: 'BML_ILO_PASSWORD')]) {
              sh "./jenkins/scripts/fetch_logs.sh"
            }
          }
          archiveArtifacts "logs-${env.BUILD_TAG}.tgz"
        }
      }
    }
  }
}
