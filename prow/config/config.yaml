prowjob_namespace: prow
pod_namespace: test-pods
log_level: debug

# Sinker configurations (for cleanup)
sinker:
  resync_period: 1m
  max_prowjob_age: 4h
  max_pod_age: 30m
  terminated_pod_ttl: 2h

plank:
  job_url_prefix_config:
    "*": https://prow.apps.test.metal3.io/view/
  report_templates:
    '*': >-
        [Full PR test history](https://prow.apps.test.metal3.io/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}).
        [Your PR dashboard](https://prow.apps.test.metal3.io/pr?query=is:pr+state:open+author:{{with
        index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).
  default_decoration_configs:
    "*":
      gcs_configuration:
        bucket: s3://prow-logs
        path_strategy: explicit
      s3_credentials_secret: s3-credentials
      utility_images:
        clonerefs: gcr.io/k8s-prow/clonerefs:v20210916-3c87dfedd5
        entrypoint: gcr.io/k8s-prow/entrypoint:v20210916-3c87dfedd5
        initupload: gcr.io/k8s-prow/initupload:v20210916-3c87dfedd5
        sidecar: gcr.io/k8s-prow/sidecar:v20210916-3c87dfedd5

tide:
  merge_method:
    metal3-io/project-config: merge
  queries:
  - repos:
    - metal3-io/baremetal-operator
    - metal3-io/base-image
    - metal3-io/cluster-api-provider-metal3
    - metal3-io/ironic-client
    - metal3-io/ironic-hardware-inventory-recorder-image
    - metal3-io/ironic-image
    - metal3-io/ironic-agent-image
    - metal3-io/ironic-ipa-downloader
    - metal3-io/ironic-prometheus-exporter
    - metal3-io/metal3-dev-env
    - metal3-io/metal3-docs
    - metal3-io/metal3-helm-chart
    - metal3-io/metal3-io.github.io
    - metal3-io/metal3-smart-exporter
    - metal3-io/project-infra
    - metal3-io/static-ip-manager-image
    - metal3-io/ip-address-manager
    - metal3-io/hardware-classification-controller
    labels:
    - lgtm
    - approved
    missingLabels:
    - needs-rebase
    - do-not-merge
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/work-in-progress
  context_options:
    # Use branch protection options to define required and optional contexts
    from-branch-protection: true

#
# Use prow to manage the configuration of github branch protection.
# This is what controls which github status checks (or CI jobs) must
# be passing for a PR to merge.
#
# Docs: https://github.com/kubernetes/test-infra/tree/master/prow/cmd/branchprotector
#
branch-protection:
  orgs:
    metal3-io:
      # Require "always_run: true" jobs to pass before merging.
      # To turn this off for a given job, set "optional: true"
      # in the job definition.
      protect: true
      repos:
        baremetal-operator:
          # Use this to specify that a status coming from outside of prow is
          # required.  We use this to require functional jobs running in
          # jenkins are required, for example.
          branches:
            main:
              required_status_checks:
                contexts: ["test-v1b1-centos-integration", "test-v1b1-integration"]
            master:
              required_status_checks:
                contexts: ["test-v1b1-centos-integration", "test-v1b1-integration"]
        cluster-api-provider-metal3:
          branches:
            main:
              required_status_checks:
                contexts: ["test-v1b1-integration"]
            release-0.5:
              required_status_checks:
                contexts: ["test-v1a5-integration"]
            release-0.4:
              required_status_checks:
                contexts: ["test-v1a4-integration"]
        ironic-image:
          required_status_checks:
            contexts: ["test-v1b1-integration"]
        ironic-ipa-downloader:
          required_status_checks:
            contexts: ["test-v1b1-integration"]
        ip-address-manager:
          branches:
            main:
              required_status_checks:
                contexts: ["test-v1b1-integration"]
            release-0.1:
              required_status_checks:
                contexts: ["test-v1a5-integration"]
            release-0.0:
              required_status_checks:
                contexts: ["test-v1a4-integration"]
        metal3-dev-env:
          required_status_checks:
            contexts: ["test-v1a5-centos-integration", "test-v1b1-integration"]

deck:
  spyglass:
    size_limit: 500000000 # 500MB
    lenses:
    - lens:
        name: metadata
      required_files:
      - started.json|finished.json
    - lens:
        config:
        name: buildlog
      required_files:
      - build-log.txt
    - lens:
        name: junit
      required_files:
      - .*/junit.*\.xml
    - lens:
        name: podinfo
      required_files:
      - podinfo.json

periodics:
 - name: periodic-stale
   interval: 1h
   decorate: true
   spec:
     containers:
     - image: gcr.io/k8s-prow/commenter:v20210916-3c87dfedd5
       command:
       - /app/robots/commenter/app.binary
       args:
       - |-
         --query=org:metal3-io
         -label:lifecycle/frozen
         -label:lifecycle/stale
       - --updated=2160h
       - --token=/etc/token/token
       - |-
         --comment=Issues go stale after 90d of inactivity.
         Mark the issue as fresh with `/remove-lifecycle stale`.
         Stale issues will close after an additional 30d of inactivity.

         If this issue is safe to close now please do so with `/close`.

         /lifecycle stale
       - --template
       - --ceiling=10
       - --confirm
       volumeMounts:
       - name: token
         mountPath: /etc/token
     volumes:
     - name: token
       secret:
         secretName: github-token
 - name: periodic-stale-close
   interval: 1h
   decorate: true
   spec:
     containers:
     - image: gcr.io/k8s-prow/commenter:v20210916-3c87dfedd5
       command:
       - /app/robots/commenter/app.binary
       args:
       - |-
         --query=org:metal3-io
         -label:lifecycle/frozen
         label:lifecycle/stale
       - --updated=720h
       - --token=/etc/token/token
       - |-
         --comment=Stale issues close after 30d of inactivity. Reopen the issue with `/reopen`. Mark the issue as fresh with `/remove-lifecycle stale`.

         /close
       - --template
       - --ceiling=10
       - --confirm
       volumeMounts:
       - name: token
         mountPath: /etc/token
     volumes:
     - name: token
       secret:
         secretName: github-token

presubmits:
  metal3-io/baremetal-operator:
  - name: gofmt
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gofmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: gosec
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gosec.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/securego/gosec:latest
        imagePullPolicy: Always
  - name: gomod
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gomod.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: markdownlint
    run_if_changed: '\.md$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/markdownlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/pipelinecomponents/markdownlint:latest
        imagePullPolicy: Always
  - name: shellcheck
    run_if_changed: '((\.sh)|^Makefile)$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/shellcheck.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/koalaman/shellcheck-alpine:stable
        imagePullPolicy: Always
  - name: unit
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/unit.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        - name: DEPLOY_KERNEL_URL
          value: "http://172.22.0.1/images/ironic-python-agent.kernel"
        - name: DEPLOY_RAMDISK_URL
          value: "http://172.22.0.1/images/ironic-python-agent.initramfs"
        - name: IRONIC_ENDPOINT
          value: "http://localhost:6385/v1/"
        - name: IRONIC_INSPECTOR_ENDPOINT
          value: "http://localhost:5050/v1/"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: generate
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/generate.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        - name: DEPLOY_KERNEL_URL
          value: "http://172.22.0.1/images/ironic-python-agent.kernel"
        - name: DEPLOY_RAMDISK_URL
          value: "http://172.22.0.1/images/ironic-python-agent.initramfs"
        - name: IRONIC_ENDPOINT
          value: "http://localhost:6385/v1/"
        - name: IRONIC_INSPECTOR_ENDPOINT
          value: "http://localhost:5050/v1/"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: golint
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/golint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: quay.io/metal3-io/golint:latest
        imagePullPolicy: Always
  - name: manifestlint
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/manifestlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/garethr/kubeval:latest
        imagePullPolicy: Always

  metal3-io/cluster-api-provider-metal3:
  - name: gofmt
    branches:
    - main
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gofmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: gofmt
    branches:
    - release-0.5
    - release-0.4
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gofmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: golint
    branches:
    - main
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/golint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: golint
    branches:
    - release-0.5
    - release-0.4
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/golint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: govet
    branches:
    - main
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/govet.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: govet
    branches:
    - release-0.5
    - release-0.4
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/govet.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: markdownlint
    run_if_changed: '\.md$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/markdownlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/pipelinecomponents/markdownlint:latest
        imagePullPolicy: Always
  - name: shellcheck
    run_if_changed: '((\.sh)|^Makefile)$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/shellcheck.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/koalaman/shellcheck-alpine:stable
        imagePullPolicy: Always
  - name: generate
    branches:
    - main
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/codegen.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: generate
    branches:
    - release-0.5
    - release-0.4
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/codegen.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: unit
    branches:
    - main
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/unit.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: unit
    branches:
    - release-0.5
    - release-0.4
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/unit.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: manifestlint
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/manifestlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/garethr/kubeval:latest
        imagePullPolicy: Always

  metal3-io/metal3-dev-env:
  - name: shellcheck
    run_if_changed: '((\.sh)|^Makefile)$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/shellcheck.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/koalaman/shellcheck-alpine:stable
        imagePullPolicy: Always
  - name: markdownlint
    run_if_changed: '\.md$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/markdownlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/pipelinecomponents/markdownlint:latest
        imagePullPolicy: Always

  metal3-io/project-infra:
  - name: check-prow-config
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - image: gcr.io/k8s-prow/checkconfig:v20210916-7657ce97bf
        args:
        - "/checkconfig"
        - "--config-path"
        - "prow/config/config.yaml"
        - "--plugin-config"
        - "prow/config/plugins.yaml"
        - "--strict"
        resources:
          requests:
            memory: "500Mi"
  metal3-io/metal3-docs:
  - name: markdownlint
    run_if_changed: '\.md$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/markdownlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/pipelinecomponents/markdownlint:latest
        imagePullPolicy: Always

  metal3-io/ip-address-manager:
  - name: gofmt
    branches:
    - main
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gofmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: gofmt
    branches:
    - release-0.0
    - release-0.1
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gofmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: govet
    branches:
    - main
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/govet.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: govet
    branches:
    - release-0.0
    - release-0.1
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/govet.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: markdownlint
    run_if_changed: '\.md$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/markdownlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/pipelinecomponents/markdownlint:latest
        imagePullPolicy: Always
  - name: shellcheck
    run_if_changed: '((\.sh)|^Makefile)$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/shellcheck.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/koalaman/shellcheck-alpine:stable
        imagePullPolicy: Always
  - name: unit
    branches:
    - main
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/unit.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: unit
    branches:
    - release-0.0
    - release-0.1
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/unit.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: generate
    branches:
    - main
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/codegen.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: generate
    branches:
    - release-0.0
    - release-0.1
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/codegen.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: manifestlint
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/manifestlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/garethr/kubeval:latest
        imagePullPolicy: Always

  metal3-io/hardware-classification-controller:
  - name: gofmt
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/gofmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: govet
    run_if_changed: '\.go$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/govet.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.17.5
        imagePullPolicy: Always
  - name: markdownlint
    run_if_changed: '\.md$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/markdownlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/pipelinecomponents/markdownlint:latest
        imagePullPolicy: Always
  - name: shellcheck
    run_if_changed: '((\.sh)|(^Makefile))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/shellcheck.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/koalaman/shellcheck-alpine:stable
        imagePullPolicy: Always
  - name: unit
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/unit.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/golang:1.16
        imagePullPolicy: Always
  - name: manifestlint
    skip_if_only_changed: '(((^|/)OWNERS)|(\.md))$'
    decorate: true
    spec:
      containers:
      - args:
        - ./hack/manifestlint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: docker.io/garethr/kubeval:latest
        imagePullPolicy: Always
